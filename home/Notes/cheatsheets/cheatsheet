##########################################################################################################
### This is just a scrap pad for little reminders and hints about shit I'll probably forget otherwise  ###
##########################################################################################################

## Keeping NetBSD Up-to date and in sync with the build scedule.
When you get pkgsrc-bulk emails regarding new builds from Mef do:

$ doas pkgin update
$ doas pkgin full-upgrade
$ doas pkgin autoremove
$ doas pkgin clean
$ cvs update -dP

## Cleaning shit up:
$ rm -r .cache/*

Check also if you find something cached in ~/.local/share and ~/.local/share/applications, remove it.
You can also empty (but dont delete) this file: /var/db/pkgin/pkgin_install-err.log


## Wanting to get a list of installed packages:
$ pkgin list | awk '{print $1}' >list_of_packages


## Sysupgrade
$ su
# sysupgrade auto https://nyftp.netbsd.org/pub/NetBSD-daily/netbsd-9/latest/amd64


## Play local sound files with sox:
It's like imagemagick but for sound files. One of the utilities is "play" which simply plays the files given on the command line in sequential order. There is no curse interface to manage your library though, so I make playlists by symlinking files in a "playlist" directory, then play the files in random order. For example:

$ cd /var/data/music
$ ln -s jamiroquai/*/*.mp3 ./playlist/
$ ln -s rhcp/*/*.ogg ./playlist/

$ cd playlist
$ play $(ls|shuf)


## upload screenshots from the command line
$ curl -F'file=@screenshot.png' https://0x0.st
of
$ curl -s --upload-file /path/to/screenshot.png https://transfer.sh/screenshot.png


## Senting email with hairloom-mailx
$ hmail -A gmail email@xyz.com

To send attachments:
~@ /path/to/attachment


## setting backgorund with xsetroot
$ xsetroot -bg \#404040 -mod 2 2

Use hsetroot instead to keep picom settings


## Set up pass
$ gpg2 --full-gen-key
Choose default
Choose passphrase
Copy GPG key to clipboard, you'll need it to run Pass the first time.

If you forgot to copy it, dont worry. Run:
$ gpg2 --list-secret-keys --keyid-format LONG
The key will be on the 'sec' line, after the first forward slash.

Then run: 
$pass init "your gpg2 key"

Usage:

Go to lastpass.com and sign in. Next click on your username in the top-right
corner. In the drop-down meny that appears, click "Export". After filling in
your details again, copy the text and save it somewhere on your disk. Make sure
you copy the whole thing, and resist the temptation to "Save Page As" - the
script doesn't like HTML.

Fire up a terminal and run the script, passing the file you saved as an argument.
It should look something like this:

$ ./lastpass2pass.rb path/to/passwords_file.csv

Obviously for this to work you need ruby installed ;)
$ doas pkgin install ruby

You may find that due to some passwords being in seperate/categorised folders that passmenu is slow af and doesn't display correctly. Just go into your .passwordstore folder and move all the .gpg's into the main folder.
Once it's all set up you can uninstall ruby if you want.

Set up PASSMENU: 
https://git.zx2c4.com/password-store/tree/contrib/dmenu/passmenu
Just put this script in ~/.config/spectrwm/ and make it executable.

## Pinentry program
Set this in ~/.gnupg/gpg-agent.conf

For gtk2:
pinentry-program /usr/pkg/bin/pinentry-gtk-2
(remember that you'll have to install it first)

For pinentry-dmenu:
pinentry-program /usr/pkg/bin/pinentry-dmenu

Download pinentry-dmenu and either install using the MakeFile or just simply place it in /usr/pkg/bi/ and make it executable. Then put pinentry-dmenu.conf in ~/.gnupg/

While your at it, also add this to gpg-agent.conf:
allow-loopback-pinentry


## GIT

In your home directory,

$ git config --global user.name "your name"
$ git config --global user.email your@email.com
$ git config --global core.editor vim

There is more here if you want, I just use those three.
Once you are done you should have a .gitconfig file in your home directory.
Now, create a folder for your repo and cd into it and run,
$ git clone https://github.com/your_repo

Now when you change a file you can check the local status against the master, add the file(s), commit the changes and push,

$ git status
$ git add . #Note the dot, it means all changes. If you just want to commit a single file use the file name instead
$ git status #Check the files were added
$ git commit #Will launch the editor defined above. Type a commit message
$ git push #You'll be prompted for username and password (the ones for your git account)

If, for some reason you don't want to commit your changes and want to keep the master version, just run
$ git restore . #As with git add, notice the dot, the same applies here one file (name of the file) or all files (the dot)


## Weechat
If you want to protect your password in configuration files, you can use secured data.
First setup a passphrase:
/secure passphrase this is my secret passphrase

Then add a secured data with your freenode password:
/secure set freenode_password xxxxxxx

Do the same for snoonet and any other servers.


## Create SSH keys
$ ssh-keygen

Follow prompts, choose defaults.


## UNTAR
Extract a tar file:
$ tar -xvf foo.tar

Extract and uncompress a tar.gz file:
$ tar -xvzf foo.tar.gz

Extract and uncompress a tar.bz2 file:
$ tar -xvjf foo.tar.bz2

Option  Description
-x  Extract files from an archive
-v  Verbosely list files processed
-f  Specify an archive or a tarball filename
-z  Decompress the contents of the compressed archive created by gzip program (tar.gz)
-j  Decompress the contents of the compressed archive created by bzip2 program (tar.bz2)


## Birch (aliased to chat)
chat -s irc.snoonet.net -u ramiferous -p hackbox


### Nixers Gopher

 > Access my account ?
           
               ssh -i path/to/key account@g.nixers.net
           
           Where "account" is your username.
           
           
           > Add content to my hole ?
           
           A symlink to your hole is availabe in your home directory:
           
               cd ~/public_gopher
           
           By default, all files present in this directory is listed
           by the gopher server. If an index file is present, its content
           is displayed rather than the directory listing.
           
           > Visit my hole ?
           
           Your hole is visible under a directory named after your account
           name. For example:
           
               gopher://g.nixers.net/1/~account/
           
           > Post content to my phlog ?
           
           By sending emails !
           
           Edit ~/.forward and set your real email address. The content of the file
           should ressemble something like this:
           
               "|/usr/local/bin/scribo -b ~/public_gopher/rlog -a you@domain.tld"
	   
	   Every email sent to <account@g.nixers.net> will create a file in the
           the "rlog" directory with you email content inside it. The post title
           will inherit from the mail subject, as for the file name.
           
           Check forward(5) and scribo(1) for further information.


## Spectrwm-git

## Updating
$ cd ~/pkgsrc/wip
$ git pull -r
$ make

MOD+Shift+q

$ doas pkgin remove spectrwm
$ cd /usr/pkgsrc/wip/spectrwm-git
$ doas make install
$ cd
$ startx

$ cd /usr/pkgsrc/wip/spectrwm-git
$ doas make clean distclean clean-depends


## GTK3
Firefox uses gtk-3
System wide configuration, place the contents of the theme's gtk-3.0 folder in /usr/pkg/share/gtk-3.0/
For user configuration ~/.config/gtk-3.0/

The best dark gtk3 theme is Adwaita-grey-dark

## GTK2
Themes go in /usr/pkg/share/themes/
For system wide configuration, place the contents of the theme's gtk-2.0 folder in /usr/pkg/share/gtk-2.0/
For user configuration ~/.gtkrc-2.0

The best dark gtk2 theme is still Mire v2

## Pinentry program
Set this in ~/.gnupg/gpg-agent.conf

For gtk2:
pinentry-program /usr/pkg/bin/pinentry-gtk-2
(remember that you'll have to install it first)

For curses:
pinentry-program /usr/pkg/bin/pinentry-curses

While your at it, also add:
allow-loopback-pinentry

To kill & restart gpg-agent:
$ gpgconf --kill gpg-agent
$ gpg-connect-agent /bye

## To install python apps using pip first install py37-pip (or py38-pip depending on your python version). 
You'll then need to install pkg_alternatives.

$ doas pkgin install py37-pip pkg_alternatives



